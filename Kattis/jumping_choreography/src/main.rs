const MAX: usize = 1_000_001;
const TREE_SIZE: usize = MAX / 2 + 1;
use std::fmt::Display;
use std::io::Read;
use std::str::{Chars, FromStr, SplitAsciiWhitespace};

fn main() {
    let mut io = IO::new();
    let even: [(i32, usize); 708] = [(0, 0), (3, 2), (4, 8), (7, 12), (8, 30), (11, 38), (12, 68), (15, 80), (16, 122), (19, 138), (20, 192), (23, 212), (24, 278), (27, 302), (28, 380), (31, 408), (32, 498), (35, 530), (36, 632), (39, 668), (40, 782), (43, 822), (44, 948), (47, 992), (48, 1130), (51, 1178), (52, 1328), (55, 1380), (56, 1542), (59, 1598), (60, 1772), (63, 1832), (64, 2018), (67, 2082), (68, 2280), (71, 2348), (72, 2558), (75, 2630), (76, 2852), (79, 2928), (80, 3162), (83, 3242), (84, 3488), (87, 3572), (88, 3830), (91, 3918), (92, 4188), (95, 4280), (96, 4562), (99, 4658), (100, 4952), (103, 5052), (104, 5358), (107, 5462), (108, 5780), (111, 5888), (112, 6218), (115, 6330), (116, 6672), (119, 6788), (120, 7142), (123, 7262), (124, 7628), (127, 7752), (128, 8130), (131, 8258), (132, 8648), (135, 8780), (136, 9182), (139, 9318), (140, 9732), (143, 9872), (144, 10298), (147, 10442), (148, 10880), (151, 11028), (152, 11478), (155, 11630), (156, 12092), (159, 12248), (160, 12722), (163, 12882), (164, 13368), (167, 13532), (168, 14030), (171, 14198), (172, 14708), (175, 14880), (176, 15402), (179, 15578), (180, 16112), (183, 16292), (184, 16838), (187, 17022), (188, 17580), (191, 17768), (192, 18338), (195, 18530), (196, 19112), (199, 19308), (200, 19902), (203, 20102), (204, 20708), (207, 20912), (208, 21530), (211, 21738), (212, 22368), (215, 22580), (216, 23222), (219, 23438), (220, 24092), (223, 24312), (224, 24978), (227, 25202), (228, 25880), (231, 26108), (232, 26798), (235, 27030), (236, 27732), (239, 27968), (240, 28682), (243, 28922), (244, 29648), (247, 29892), (248, 30630), (251, 30878), (252, 31628), (255, 31880), (256, 32642), (259, 32898), (260, 33672), (263, 33932), (264, 34718), (267, 34982), (268, 35780), (271, 36048), (272, 36858), (275, 37130), (276, 37952), (279, 38228), (280, 39062), (283, 39342), (284, 40188), (287, 40472), (288, 41330), (291, 41618), (292, 42488), (295, 42780), (296, 43662), (299, 43958), (300, 44852), (303, 45152), (304, 46058), (307, 46362), (308, 47280), (311, 47588), (312, 48518), (315, 48830), (316, 49772), (319, 50088), (320, 51042), (323, 51362), (324, 52328), (327, 52652), (328, 53630), (331, 53958), (332, 54948), (335, 55280), (336, 56282), (339, 56618), (340, 57632), (343, 57972), (344, 58998), (347, 59342), (348, 60380), (351, 60728), (352, 61778), (355, 62130), (356, 63192), (359, 63548), (360, 64622), (363, 64982), (364, 66068), (367, 66432), (368, 67530), (371, 67898), (372, 69008), (375, 69380), (376, 70502), (379, 70878), (380, 72012), (383, 72392), (384, 73538), (387, 73922), (388, 75080), (391, 75468), (392, 76638), (395, 77030), (396, 78212), (399, 78608), (400, 79802), (403, 80202), (404, 81408), (407, 81812), (408, 83030), (411, 83438), (412, 84668), (415, 85080), (416, 86322), (419, 86738), (420, 87992), (423, 88412), (424, 89678), (427, 90102), (428, 91380), (431, 91808), (432, 93098), (435, 93530), (436, 94832), (439, 95268), (440, 96582), (443, 97022), (444, 98348), (447, 98792), (448, 100130), (451, 100578), (452, 101928), (455, 102380), (456, 103742), (459, 104198), (460, 105572), (463, 106032), (464, 107418), (467, 107882), (468, 109280), (471, 109748), (472, 111158), (475, 111630), (476, 113052), (479, 113528), (480, 114962), (483, 115442), (484, 116888), (487, 117372), (488, 118830), (491, 119318), (492, 120788), (495, 121280), (496, 122762), (499, 123258), (500, 124752), (503, 125252), (504, 126758), (507, 127262), (508, 128780), (511, 129288), (512, 130818), (515, 131330), (516, 132872), (519, 133388), (520, 134942), (523, 135462), (524, 137028), (527, 137552), (528, 139130), (531, 139658), (532, 141248), (535, 141780), (536, 143382), (539, 143918), (540, 145532), (543, 146072), (544, 147698), (547, 148242), (548, 149880), (551, 150428), (552, 152078), (555, 152630), (556, 154292), (559, 154848), (560, 156522), (563, 157082), (564, 158768), (567, 159332), (568, 161030), (571, 161598), (572, 163308), (575, 163880), (576, 165602), (579, 166178), (580, 167912), (583, 168492), (584, 170238), (587, 170822), (588, 172580), (591, 173168), (592, 174938), (595, 175530), (596, 177312), (599, 177908), (600, 179702), (603, 180302), (604, 182108), (607, 182712), (608, 184530), (611, 185138), (612, 186968), (615, 187580), (616, 189422), (619, 190038), (620, 191892), (623, 192512), (624, 194378), (627, 195002), (628, 196880), (631, 197508), (632, 199398), (635, 200030), (636, 201932), (639, 202568), (640, 204482), (643, 205122), (644, 207048), (647, 207692), (648, 209630), (651, 210278), (652, 212228), (655, 212880), (656, 214842), (659, 215498), (660, 217472), (663, 218132), (664, 220118), (667, 220782), (668, 222780), (671, 223448), (672, 225458), (675, 226130), (676, 228152), (679, 228828), (680, 230862), (683, 231542), (684, 233588), (687, 234272), (688, 236330), (691, 237018), (692, 239088), (695, 239780), (696, 241862), (699, 242558), (700, 244652), (703, 245352), (704, 247458), (707, 248162), (708, 250280), (711, 250988), (712, 253118), (715, 253830), (716, 255972), (719, 256688), (720, 258842), (723, 259562), (724, 261728), (727, 262452), (728, 264630), (731, 265358), (732, 267548), (735, 268280), (736, 270482), (739, 271218), (740, 273432), (743, 274172), (744, 276398), (747, 277142), (748, 279380), (751, 280128), (752, 282378), (755, 283130), (756, 285392), (759, 286148), (760, 288422), (763, 289182), (764, 291468), (767, 292232), (768, 294530), (771, 295298), (772, 297608), (775, 298380), (776, 300702), (779, 301478), (780, 303812), (783, 304592), (784, 306938), (787, 307722), (788, 310080), (791, 310868), (792, 313238), (795, 314030), (796, 316412), (799, 317208), (800, 319602), (803, 320402), (804, 322808), (807, 323612), (808, 326030), (811, 326838), (812, 329268), (815, 330080), (816, 332522), (819, 333338), (820, 335792), (823, 336612), (824, 339078), (827, 339902), (828, 342380), (831, 343208), (832, 345698), (835, 346530), (836, 349032), (839, 349868), (840, 352382), (843, 353222), (844, 355748), (847, 356592), (848, 359130), (851, 359978), (852, 362528), (855, 363380), (856, 365942), (859, 366798), (860, 369372), (863, 370232), (864, 372818), (867, 373682), (868, 376280), (871, 377148), (872, 379758), (875, 380630), (876, 383252), (879, 384128), (880, 386762), (883, 387642), (884, 390288), (887, 391172), (888, 393830), (891, 394718), (892, 397388), (895, 398280), (896, 400962), (899, 401858), (900, 404552), (903, 405452), (904, 408158), (907, 409062), (908, 411780), (911, 412688), (912, 415418), (915, 416330), (916, 419072), (919, 419988), (920, 422742), (923, 423662), (924, 426428), (927, 427352), (928, 430130), (931, 431058), (932, 433848), (935, 434780), (936, 437582), (939, 438518), (940, 441332), (943, 442272), (944, 445098), (947, 446042), (948, 448880), (951, 449828), (952, 452678), (955, 453630), (956, 456492), (959, 457448), (960, 460322), (963, 461282), (964, 464168), (967, 465132), (968, 468030), (971, 468998), (972, 471908), (975, 472880), (976, 475802), (979, 476778), (980, 479712), (983, 480692), (984, 483638), (987, 484622), (988, 487580), (991, 488568), (992, 491538), (995, 492530), (996, 495512), (999, 496508), (1000, 499502), (1003, 500502), (1004, 503508), (1007, 504512), (1008, 507530), (1011, 508538), (1012, 511568), (1015, 512580), (1016, 515622), (1019, 516638), (1020, 519692), (1023, 520712), (1024, 523778), (1027, 524802), (1028, 527880), (1031, 528908), (1032, 531998), (1035, 533030), (1036, 536132), (1039, 537168), (1040, 540282), (1043, 541322), (1044, 544448), (1047, 545492), (1048, 548630), (1051, 549678), (1052, 552828), (1055, 553880), (1056, 557042), (1059, 558098), (1060, 561272), (1063, 562332), (1064, 565518), (1067, 566582), (1068, 569780), (1071, 570848), (1072, 574058), (1075, 575130), (1076, 578352), (1079, 579428), (1080, 582662), (1083, 583742), (1084, 586988), (1087, 588072), (1088, 591330), (1091, 592418), (1092, 595688), (1095, 596780), (1096, 600062), (1099, 601158), (1100, 604452), (1103, 605552), (1104, 608858), (1107, 609962), (1108, 613280), (1111, 614388), (1112, 617718), (1115, 618830), (1116, 622172), (1119, 623288), (1120, 626642), (1123, 627762), (1124, 631128), (1127, 632252), (1128, 635630), (1131, 636758), (1132, 640148), (1135, 641280), (1136, 644682), (1139, 645818), (1140, 649232), (1143, 650372), (1144, 653798), (1147, 654942), (1148, 658380), (1151, 659528), (1152, 662978), (1155, 664130), (1156, 667592), (1159, 668748), (1160, 672222), (1163, 673382), (1164, 676868), (1167, 678032), (1168, 681530), (1171, 682698), (1172, 686208), (1175, 687380), (1176, 690902), (1179, 692078), (1180, 695612), (1183, 696792), (1184, 700338), (1187, 701522), (1188, 705080), (1191, 706268), (1192, 709838), (1195, 711030), (1196, 714612), (1199, 715808), (1200, 719402), (1203, 720602), (1204, 724208), (1207, 725412), (1208, 729030), (1211, 730238), (1212, 733868), (1215, 735080), (1216, 738722), (1219, 739938), (1220, 743592), (1223, 744812), (1224, 748478), (1227, 749702), (1228, 753380), (1231, 754608), (1232, 758298), (1235, 759530), (1236, 763232), (1239, 764468), (1240, 768182), (1243, 769422), (1244, 773148), (1247, 774392), (1248, 778130), (1251, 779378), (1252, 783128), (1255, 784380), (1256, 788142), (1259, 789398), (1260, 793172), (1263, 794432), (1264, 798218), (1267, 799482), (1268, 803280), (1271, 804548), (1272, 808358), (1275, 809630), (1276, 813452), (1279, 814728), (1280, 818562), (1283, 819842), (1284, 823688), (1287, 824972), (1288, 828830), (1291, 830118), (1292, 833988), (1295, 835280), (1296, 839162), (1299, 840458), (1300, 844352), (1303, 845652), (1304, 849558), (1307, 850862), (1308, 854780), (1311, 856088), (1312, 860018), (1315, 861330), (1316, 865272), (1319, 866588), (1320, 870542), (1323, 871862), (1324, 875828), (1327, 877152), (1328, 881130), (1331, 882458), (1332, 886448), (1335, 887780), (1336, 891782), (1339, 893118), (1340, 897132), (1343, 898472), (1344, 902498), (1347, 903842), (1348, 907880), (1351, 909228), (1352, 913278), (1355, 914630), (1356, 918692), (1359, 920048), (1360, 924122), (1363, 925482), (1364, 929568), (1367, 930932), (1368, 935030), (1371, 936398), (1372, 940508), (1375, 941880), (1376, 946002), (1379, 947378), (1380, 951512), (1383, 952892), (1384, 957038), (1387, 958422), (1388, 962580), (1391, 963968), (1392, 968138), (1395, 969530), (1396, 973712), (1399, 975108), (1400, 979302), (1403, 980702), (1404, 984908), (1407, 986312), (1408, 990530), (1411, 991938), (1412, 996168), (1415, 997580)];
    let odd: [(i32, usize); 709] = [(0, 0), (1, 1), (2, 3), (5, 5), (6, 17), (9, 23), (10, 47), (13, 57), (14, 93), (17, 107), (18, 155), (21, 173), (22, 233), (25, 255), (26, 327), (29, 353), (30, 437), (33, 467), (34, 563), (37, 597), (38, 705), (41, 743), (42, 863), (45, 905), (46, 1037), (49, 1083), (50, 1227), (53, 1277), (54, 1433), (57, 1487), (58, 1655), (61, 1713), (62, 1893), (65, 1955), (66, 2147), (69, 2213), (70, 2417), (73, 2487), (74, 2703), (77, 2777), (78, 3005), (81, 3083), (82, 3323), (85, 3405), (86, 3657), (89, 3743), (90, 4007), (93, 4097), (94, 4373), (97, 4467), (98, 4755), (101, 4853), (102, 5153), (105, 5255), (106, 5567), (109, 5673), (110, 5997), (113, 6107), (114, 6443), (117, 6557), (118, 6905), (121, 7023), (122, 7383), (125, 7505), (126, 7877), (129, 8003), (130, 8387), (133, 8517), (134, 8913), (137, 9047), (138, 9455), (141, 9593), (142, 10013), (145, 10155), (146, 10587), (149, 10733), (150, 11177), (153, 11327), (154, 11783), (157, 11937), (158, 12405), (161, 12563), (162, 13043), (165, 13205), (166, 13697), (169, 13863), (170, 14367), (173, 14537), (174, 15053), (177, 15227), (178, 15755), (181, 15933), (182, 16473), (185, 16655), (186, 17207), (189, 17393), (190, 17957), (193, 18147), (194, 18723), (197, 18917), (198, 19505), (201, 19703), (202, 20303), (205, 20505), (206, 21117), (209, 21323), (210, 21947), (213, 22157), (214, 22793), (217, 23007), (218, 23655), (221, 23873), (222, 24533), (225, 24755), (226, 25427), (229, 25653), (230, 26337), (233, 26567), (234, 27263), (237, 27497), (238, 28205), (241, 28443), (242, 29163), (245, 29405), (246, 30137), (249, 30383), (250, 31127), (253, 31377), (254, 32133), (257, 32387), (258, 33155), (261, 33413), (262, 34193), (265, 34455), (266, 35247), (269, 35513), (270, 36317), (273, 36587), (274, 37403), (277, 37677), (278, 38505), (281, 38783), (282, 39623), (285, 39905), (286, 40757), (289, 41043), (290, 41907), (293, 42197), (294, 43073), (297, 43367), (298, 44255), (301, 44553), (302, 45453), (305, 45755), (306, 46667), (309, 46973), (310, 47897), (313, 48207), (314, 49143), (317, 49457), (318, 50405), (321, 50723), (322, 51683), (325, 52005), (326, 52977), (329, 53303), (330, 54287), (333, 54617), (334, 55613), (337, 55947), (338, 56955), (341, 57293), (342, 58313), (345, 58655), (346, 59687), (349, 60033), (350, 61077), (353, 61427), (354, 62483), (357, 62837), (358, 63905), (361, 64263), (362, 65343), (365, 65705), (366, 66797), (369, 67163), (370, 68267), (373, 68637), (374, 69753), (377, 70127), (378, 71255), (381, 71633), (382, 72773), (385, 73155), (386, 74307), (389, 74693), (390, 75857), (393, 76247), (394, 77423), (397, 77817), (398, 79005), (401, 79403), (402, 80603), (405, 81005), (406, 82217), (409, 82623), (410, 83847), (413, 84257), (414, 85493), (417, 85907), (418, 87155), (421, 87573), (422, 88833), (425, 89255), (426, 90527), (429, 90953), (430, 92237), (433, 92667), (434, 93963), (437, 94397), (438, 95705), (441, 96143), (442, 97463), (445, 97905), (446, 99237), (449, 99683), (450, 101027), (453, 101477), (454, 102833), (457, 103287), (458, 104655), (461, 105113), (462, 106493), (465, 106955), (466, 108347), (469, 108813), (470, 110217), (473, 110687), (474, 112103), (477, 112577), (478, 114005), (481, 114483), (482, 115923), (485, 116405), (486, 117857), (489, 118343), (490, 119807), (493, 120297), (494, 121773), (497, 122267), (498, 123755), (501, 124253), (502, 125753), (505, 126255), (506, 127767), (509, 128273), (510, 129797), (513, 130307), (514, 131843), (517, 132357), (518, 133905), (521, 134423), (522, 135983), (525, 136505), (526, 138077), (529, 138603), (530, 140187), (533, 140717), (534, 142313), (537, 142847), (538, 144455), (541, 144993), (542, 146613), (545, 147155), (546, 148787), (549, 149333), (550, 150977), (553, 151527), (554, 153183), (557, 153737), (558, 155405), (561, 155963), (562, 157643), (565, 158205), (566, 159897), (569, 160463), (570, 162167), (573, 162737), (574, 164453), (577, 165027), (578, 166755), (581, 167333), (582, 169073), (585, 169655), (586, 171407), (589, 171993), (590, 173757), (593, 174347), (594, 176123), (597, 176717), (598, 178505), (601, 179103), (602, 180903), (605, 181505), (606, 183317), (609, 183923), (610, 185747), (613, 186357), (614, 188193), (617, 188807), (618, 190655), (621, 191273), (622, 193133), (625, 193755), (626, 195627), (629, 196253), (630, 198137), (633, 198767), (634, 200663), (637, 201297), (638, 203205), (641, 203843), (642, 205763), (645, 206405), (646, 208337), (649, 208983), (650, 210927), (653, 211577), (654, 213533), (657, 214187), (658, 216155), (661, 216813), (662, 218793), (665, 219455), (666, 221447), (669, 222113), (670, 224117), (673, 224787), (674, 226803), (677, 227477), (678, 229505), (681, 230183), (682, 232223), (685, 232905), (686, 234957), (689, 235643), (690, 237707), (693, 238397), (694, 240473), (697, 241167), (698, 243255), (701, 243953), (702, 246053), (705, 246755), (706, 248867), (709, 249573), (710, 251697), (713, 252407), (714, 254543), (717, 255257), (718, 257405), (721, 258123), (722, 260283), (725, 261005), (726, 263177), (729, 263903), (730, 266087), (733, 266817), (734, 269013), (737, 269747), (738, 271955), (741, 272693), (742, 274913), (745, 275655), (746, 277887), (749, 278633), (750, 280877), (753, 281627), (754, 283883), (757, 284637), (758, 286905), (761, 287663), (762, 289943), (765, 290705), (766, 292997), (769, 293763), (770, 296067), (773, 296837), (774, 299153), (777, 299927), (778, 302255), (781, 303033), (782, 305373), (785, 306155), (786, 308507), (789, 309293), (790, 311657), (793, 312447), (794, 314823), (797, 315617), (798, 318005), (801, 318803), (802, 321203), (805, 322005), (806, 324417), (809, 325223), (810, 327647), (813, 328457), (814, 330893), (817, 331707), (818, 334155), (821, 334973), (822, 337433), (825, 338255), (826, 340727), (829, 341553), (830, 344037), (833, 344867), (834, 347363), (837, 348197), (838, 350705), (841, 351543), (842, 354063), (845, 354905), (846, 357437), (849, 358283), (850, 360827), (853, 361677), (854, 364233), (857, 365087), (858, 367655), (861, 368513), (862, 371093), (865, 371955), (866, 374547), (869, 375413), (870, 378017), (873, 378887), (874, 381503), (877, 382377), (878, 385005), (881, 385883), (882, 388523), (885, 389405), (886, 392057), (889, 392943), (890, 395607), (893, 396497), (894, 399173), (897, 400067), (898, 402755), (901, 403653), (902, 406353), (905, 407255), (906, 409967), (909, 410873), (910, 413597), (913, 414507), (914, 417243), (917, 418157), (918, 420905), (921, 421823), (922, 424583), (925, 425505), (926, 428277), (929, 429203), (930, 431987), (933, 432917), (934, 435713), (937, 436647), (938, 439455), (941, 440393), (942, 443213), (945, 444155), (946, 446987), (949, 447933), (950, 450777), (953, 451727), (954, 454583), (957, 455537), (958, 458405), (961, 459363), (962, 462243), (965, 463205), (966, 466097), (969, 467063), (970, 469967), (973, 470937), (974, 473853), (977, 474827), (978, 477755), (981, 478733), (982, 481673), (985, 482655), (986, 485607), (989, 486593), (990, 489557), (993, 490547), (994, 493523), (997, 494517), (998, 497505), (1001, 498503), (1002, 501503), (1005, 502505), (1006, 505517), (1009, 506523), (1010, 509547), (1013, 510557), (1014, 513593), (1017, 514607), (1018, 517655), (1021, 518673), (1022, 521733), (1025, 522755), (1026, 525827), (1029, 526853), (1030, 529937), (1033, 530967), (1034, 534063), (1037, 535097), (1038, 538205), (1041, 539243), (1042, 542363), (1045, 543405), (1046, 546537), (1049, 547583), (1050, 550727), (1053, 551777), (1054, 554933), (1057, 555987), (1058, 559155), (1061, 560213), (1062, 563393), (1065, 564455), (1066, 567647), (1069, 568713), (1070, 571917), (1073, 572987), (1074, 576203), (1077, 577277), (1078, 580505), (1081, 581583), (1082, 584823), (1085, 585905), (1086, 589157), (1089, 590243), (1090, 593507), (1093, 594597), (1094, 597873), (1097, 598967), (1098, 602255), (1101, 603353), (1102, 606653), (1105, 607755), (1106, 611067), (1109, 612173), (1110, 615497), (1113, 616607), (1114, 619943), (1117, 621057), (1118, 624405), (1121, 625523), (1122, 628883), (1125, 630005), (1126, 633377), (1129, 634503), (1130, 637887), (1133, 639017), (1134, 642413), (1137, 643547), (1138, 646955), (1141, 648093), (1142, 651513), (1145, 652655), (1146, 656087), (1149, 657233), (1150, 660677), (1153, 661827), (1154, 665283), (1157, 666437), (1158, 669905), (1161, 671063), (1162, 674543), (1165, 675705), (1166, 679197), (1169, 680363), (1170, 683867), (1173, 685037), (1174, 688553), (1177, 689727), (1178, 693255), (1181, 694433), (1182, 697973), (1185, 699155), (1186, 702707), (1189, 703893), (1190, 707457), (1193, 708647), (1194, 712223), (1197, 713417), (1198, 717005), (1201, 718203), (1202, 721803), (1205, 723005), (1206, 726617), (1209, 727823), (1210, 731447), (1213, 732657), (1214, 736293), (1217, 737507), (1218, 741155), (1221, 742373), (1222, 746033), (1225, 747255), (1226, 750927), (1229, 752153), (1230, 755837), (1233, 757067), (1234, 760763), (1237, 761997), (1238, 765705), (1241, 766943), (1242, 770663), (1245, 771905), (1246, 775637), (1249, 776883), (1250, 780627), (1253, 781877), (1254, 785633), (1257, 786887), (1258, 790655), (1261, 791913), (1262, 795693), (1265, 796955), (1266, 800747), (1269, 802013), (1270, 805817), (1273, 807087), (1274, 810903), (1277, 812177), (1278, 816005), (1281, 817283), (1282, 821123), (1285, 822405), (1286, 826257), (1289, 827543), (1290, 831407), (1293, 832697), (1294, 836573), (1297, 837867), (1298, 841755), (1301, 843053), (1302, 846953), (1305, 848255), (1306, 852167), (1309, 853473), (1310, 857397), (1313, 858707), (1314, 862643), (1317, 863957), (1318, 867905), (1321, 869223), (1322, 873183), (1325, 874505), (1326, 878477), (1329, 879803), (1330, 883787), (1333, 885117), (1334, 889113), (1337, 890447), (1338, 894455), (1341, 895793), (1342, 899813), (1345, 901155), (1346, 905187), (1349, 906533), (1350, 910577), (1353, 911927), (1354, 915983), (1357, 917337), (1358, 921405), (1361, 922763), (1362, 926843), (1365, 928205), (1366, 932297), (1369, 933663), (1370, 937767), (1373, 939137), (1374, 943253), (1377, 944627), (1378, 948755), (1381, 950133), (1382, 954273), (1385, 955655), (1386, 959807), (1389, 961193), (1390, 965357), (1393, 966747), (1394, 970923), (1397, 972317), (1398, 976505), (1401, 977903), (1402, 982103), (1405, 983505), (1406, 987717), (1409, 989123), (1410, 993347), (1413, 994757), (1414, 998993)];

    let mut even_tree = FenwickTree::new();
    let mut odd_tree = FenwickTree::new();
    let (_, mut t): (usize, usize) = io.r2();

    for i in io.line() {
        change_frog(&i, &1, &mut even_tree, &mut odd_tree, &even, &odd);
    }

    let c = io.r();
    for _ in 0..c {
        let (qt, i): (char, usize) = io.r2();
        if qt == 't' {
            t = i;
        } else if qt == '+' {
            change_frog(&i, &1, &mut even_tree, &mut odd_tree, &even, &odd);
        } else {
            change_frog(&i, &-1, &mut even_tree, &mut odd_tree, &even, &odd);
        }
        print!("{} ", query(&t, &even_tree, &odd_tree))
    }
}

fn update(p: &usize, tree: &mut FenwickTree<i32>, jumps: &[(i32, usize)], d: &i32) {
    let mut prev = 0;
    let mut prev_pos = 0;
    for (cost, jump) in jumps.iter().rev() {
        if jump <= p {
            tree.update(prev_pos, d * (*cost - prev));
            prev = *cost;
            prev_pos = (p - *jump) / 2 + 1;
        }
    }

    // right
    let mut prev = 0;
    for (cost, jump) in &jumps[1..] {
        let i = *jump + p;
        if i >= MAX {
            break;
        }
        tree.update(i / 2, d * (*cost - prev));
        prev = *cost
    }
}

fn change_frog(
    pos: &usize,
    delta: &i32,
    even_tree: &mut FenwickTree<i32>,
    odd_tree: &mut FenwickTree<i32>,
    even: &[(i32, usize)],
    odd: &[(i32, usize)],
) {
    if pos % 2 == 0 {
        update(pos, even_tree, even, delta);
        update(pos, odd_tree, odd, delta);
    } else {
        update(pos, even_tree, odd, delta);
        update(pos, odd_tree, even, delta);
    }
}

fn query(t: &usize, even_tree: &FenwickTree<i32>, odd_tree: &FenwickTree<i32>) -> i32 {
    if t % 2 == 0 {
        return even_tree.query(t / 2);
    }
    return odd_tree.query(t / 2);
}




struct FenwickTree<T> {
    tree: [T; TREE_SIZE+1],
}

#[allow(dead_code)]
impl<T> FenwickTree<T>
where
    T: Clone + Copy + Default + Eq + std::ops::Sub<Output = T> + std::ops::AddAssign
{
    fn new() -> Self {
        let tree = [T::default(); TREE_SIZE+1];
        FenwickTree {
            tree: tree,
        }
    }

    fn update(&mut self, mut i: usize, val: T) {
        i += 1;
        while i <= TREE_SIZE {
            self.tree[i] += val;
            i += i & i.wrapping_neg();
        }
    }

    // [0, r]
    fn query(&self, mut r: usize) -> T {
        r += 1;
        let mut res = T::default();
        while r > 0 {
            res += self.tree[r];
            r -= r & r.wrapping_neg();
        }
        return res;
    }
}

struct IO {
    buf: String,
    stdin: std::io::Stdin,
}

#[allow(dead_code)]
impl IO {
    fn new() -> Self {
        IO {
            buf: String::new(),
            stdin: std::io::stdin(),
        }
    }

    fn _rl(&mut self) {
        self.buf.clear();
        let _ = self.stdin.read_line(&mut self.buf);
    }

    fn parse<T: FromStr>(&self, s: &str) -> T {
        unsafe { s.parse().unwrap_unchecked() }
    }

    fn parse_next<T: FromStr>(&self, line_split: &mut SplitAsciiWhitespace) -> T {
        unsafe { self.parse(line_split.next().unwrap_unchecked()) }
    }

    fn line<T: FromStr>(&mut self) -> impl Iterator<Item = T> + '_ {
        self._rl();
        return self.buf.split_ascii_whitespace().map(|x| self.parse(x));
    }

    fn linenl<T: FromStr>(&mut self, n: usize) -> impl Iterator<Item = T> + '_ {
        return (0..n).map(|_| self.r());
    }
    
    fn vec<T: FromStr>(&mut self) -> Vec<T> {
        return self.line().collect();
    }

    fn vecnl<T: FromStr>(&mut self, n: usize) -> Vec<T> {
        return self.linenl(n).collect();
    }

    fn chars(&mut self) -> Chars {
        self._rl();
        return self.buf.trim().chars();
    }

    fn all(&mut self) -> String {
        self.buf.clear();
        let _ = self.stdin.read_to_string(&mut self.buf);
        return self.buf.trim().to_string();
    }

    fn print_vec<T: Display>(&self, vec: &[T]) {
        for x in vec {
            print!("{} ", *x);
        }
    }

    fn r<T: FromStr>(&mut self) -> T {
        self._rl();
        self.parse(self.buf.trim())
    }

    fn r2<T1, T2>(&mut self) -> (T1, T2)
    where
        T1: FromStr,
        T2: FromStr,
    {
        self._rl();
        let mut line_split = self.buf.split_ascii_whitespace();
        (
            self.parse_next(&mut line_split),
            self.parse_next(&mut line_split),
        )
    }

    fn r3<T1, T2, T3>(&mut self) -> (T1, T2, T3)
    where
        T1: FromStr,
        T2: FromStr,
        T3: FromStr,
    {
        self._rl();
        let mut line_split = self.buf.split_ascii_whitespace();
        (
            self.parse_next(&mut line_split),
            self.parse_next(&mut line_split),
            self.parse_next(&mut line_split),
        )
    }

    fn r4<T1, T2, T3, T4>(&mut self) -> (T1, T2, T3, T4)
    where
        T1: FromStr,
        T2: FromStr,
        T3: FromStr,
        T4: FromStr,
    {
        self._rl();
        let mut line_split = self.buf.split_ascii_whitespace();
        (
            self.parse_next(&mut line_split),
            self.parse_next(&mut line_split),
            self.parse_next(&mut line_split),
            self.parse_next(&mut line_split),
        )
    }

    fn r5<T1, T2, T3, T4, T5>(&mut self) -> (T1, T2, T3, T4, T5)
    where
        T1: FromStr,
        T2: FromStr,
        T3: FromStr,
        T4: FromStr,
        T5: FromStr,
    {
        self._rl();
        let mut line_split = self.buf.split_ascii_whitespace();
        (
            self.parse_next(&mut line_split),
            self.parse_next(&mut line_split),
            self.parse_next(&mut line_split),
            self.parse_next(&mut line_split),
            self.parse_next(&mut line_split),
        )
    }
}